diff --git a/web_app/mysite/db.sqlite3 b/web_app/mysite/db.sqlite3
index 0f4326f..3aba3f8 100644
Binary files a/web_app/mysite/db.sqlite3 and b/web_app/mysite/db.sqlite3 differ
diff --git a/web_app/mysite/mysite/settings.py b/web_app/mysite/mysite/settings.py
index 59f05c6..e8c9796 100644
--- a/web_app/mysite/mysite/settings.py
+++ b/web_app/mysite/mysite/settings.py
@@ -49,8 +49,6 @@ INSTALLED_APPS = [
     'social_django',
 
     'rest_framework',
-    'rest_framework.authtoken',
-
 
 ]
 
@@ -161,7 +159,7 @@ REST_FRAMEWORK = {
     # Use Django's standard `django.contrib.auth` permissions,
     # or allow read-only access for unauthenticated users.
     'DEFAULT_PERMISSION_CLASSES': [
-        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly',
+        # 'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly',
     ],
     'DEFAULT_AUTHENTICATION_CLASSES': (
         'rest_framework.authentication.BasicAuthentication',
diff --git a/web_app/mysite/read/api_views.py b/web_app/mysite/read/api_views.py
new file mode 100644
index 0000000..fcd24a5
--- /dev/null
+++ b/web_app/mysite/read/api_views.py
@@ -0,0 +1,42 @@
+from .serializers import DocumentSerializer, UserSerializer
+from rest_framework import status
+from rest_framework.decorators import api_view
+from rest_framework.response import Response
+from .models import User, Student, Teacher, Classroom, Document, Enrolled_in, Student_Notice, Student_Document
+
+
+@api_view(['GET', 'POST'])
+def user_list(request):
+    if(request.method == 'GET'):
+        users = User.objects.all()
+        serializer = UserSerializer(users, many=True)
+        return Response(serializer.data)
+    elif(request.method == 'POST'):
+        serializer = UserSerializer(data=request.data)
+        if serializer.is_valid():
+            serializer.save()
+            return Response(serializer.data, status=status.HTTP_201_CREATED)
+        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
+
+
+@api_view(['GET', 'PUT', 'DELETE'])
+def user_detail(request, username):
+    try:
+        user = User.objects.get(username=username)
+    except(User.DoesNotExist):
+        return Response(status=status.HTTP_404_NOT_FOUND)
+
+    print(user)
+    if(request.method == 'GET'):
+        serializer = UserSerializer(user)
+        return Response(serializer.data)
+    elif(request.method == 'PUT'):
+        serializer = UserSerializer(user, data=request.data)
+        if(serializer.is_valid()):
+            serializer.save()
+            return Response(serializer.data)
+        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
+    elif(request.method == 'DELETE'):
+        user.delete();
+        return Response(status=status.HTTP_204_NO_CONTENT)
+
diff --git a/web_app/mysite/read/serializers.py b/web_app/mysite/read/serializers.py
index a3d32cf..1d495d5 100644
--- a/web_app/mysite/read/serializers.py
+++ b/web_app/mysite/read/serializers.py
@@ -1,7 +1,56 @@
 from rest_framework import serializers
-from .models import Document
+from .models import User, Student, Teacher, Classroom, Document, Enrolled_in, Student_Document, Student_Notice
+
+
+
+class UserSerializer(serializers.HyperlinkedModelSerializer):
+    class Meta:
+        model = User
+        fields = ['username', 'email', 'first_name', 'last_name', 'is_student', 'is_teacher']
+
+
+class StudentSerializer(serializers.ModelSerializer):
+    class Meta:
+        model = Student
+        fields = ['user', 'photo']
+
+
+class TeacherSerializer(serializers.ModelSerializer):
+    class Meta:
+        model = Teacher
+        fields = ['user']
+
+class ClassroomSerializer(serializers.ModelSerializer):
+    class Meta:
+        model = Classroom
+        fields = ['name', 'start_date', 'end_date', 'teacher']
 
 class DocumentSerializer(serializers.ModelSerializer):
     class Meta:
-        model =  Document
-        fields = ('id','name','upload_date','classroom')
+        model = Document
+        fields = ['name', 'upload_date', 'classroom', 'document_file',]
+
+class EnrolledInSerializer(serializers.ModelSerializer):
+    class Meta:
+        model = Enrolled_in
+        fields = ['student', 'classroom', 'status']
+
+class StudentDocumentSerializer(serializers.ModelSerializer):
+    class Meta:
+        model = Student_Document
+        fields = ['enrolled_in', 'document', 'time_spent']
+
+class StudentNoticeSerializer(serializers.ModelSerializer):
+    class Meta:
+        model = Student_Notice
+        fields = ['student', 'notice']
+
+
+
+
+
+
+# class DocumentSerializer(serializers.ModelSerializer):
+    # class Meta:
+        # model =  Document
+        # fields = ('id','name','upload_date','classroom')
diff --git a/web_app/mysite/read/urls.py b/web_app/mysite/read/urls.py
index 198f023..aab6a41 100644
--- a/web_app/mysite/read/urls.py
+++ b/web_app/mysite/read/urls.py
@@ -1,17 +1,11 @@
 from django.urls import path
 
-from . import views
+from . import views, api_views
 from django.contrib import admin
 from django.urls import path, include
 # from django.contrib.auth import views as auth_views
 # from django.contrib.auth import views
 
-from rest_framework import routers
-from rest_framework.authtoken.views import obtain_auth_token
-from .views import DocumentViewSet
-
-router = routers.DefaultRouter()
-router.register(r'api', DocumentViewSet,'Docs')
 
 
 urlpatterns = [
@@ -42,7 +36,8 @@ urlpatterns = [
     path('google_sign_in/', views.google_sign_in_view, name='google_sign_in_view'),
 
 
-    path('teacher/classes/api/', include(router.urls)),
-    path(r'^api-token-auth/', obtain_auth_token),
+    # API paths
+    path('api/users/', api_views.user_list, name='user_list'),
+    path('api/users/<slug:username>', api_views.user_detail, name='user_detail'),
 
 ]
diff --git a/web_app/mysite/read/views.py b/web_app/mysite/read/views.py
index 81a7b3f..e0a95bb 100644
--- a/web_app/mysite/read/views.py
+++ b/web_app/mysite/read/views.py
@@ -1,5 +1,5 @@
 from django.shortcuts import render, get_object_or_404, get_list_or_404
-from django.http import HttpResponse, Http404, HttpResponseRedirect, FileResponse
+from django.http import HttpResponse, Http404, HttpResponseRedirect, FileResponse, JsonResponse
 from django.urls import reverse
 from .forms import LoginForm, RegistrationForm, AddClassroomForm, AddDocumentForm, StudentUploadPhotoForm, GoogleForm
 from .models import User, Student, Teacher, Classroom, Document, Enrolled_in, Student_Notice, Student_Document
@@ -15,26 +15,29 @@ from os import path
 from . import face_authenticate
 import json
 
-from rest_framework import viewsets
-from rest_framework import authentication, permissions
-from rest_framework.permissions import IsAuthenticated
-from .serializers import DocumentSerializer
+# from rest_framework import viewsets
+# from rest_framework import authentication, permissions
+# from rest_framework.permissions import IsAuthenticated
 from django.conf import settings
-from django.db.models.signals import post_save
-from django.dispatch import receiver
-from rest_framework.authtoken.models import Token
-from rest_framework.authentication import SessionAuthentication, BasicAuthentication
+# from django.db.models.signals import post_save
+# from django.dispatch import receiver
+# from rest_framework.authtoken.models import Token
+# from rest_framework.authentication import SessionAuthentication, BasicAuthentication
 from django.views.decorators.csrf import csrf_exempt
 
+from .serializers import DocumentSerializer, UserSerializer
+from rest_framework import status
+from rest_framework.decorators import api_view
+from rest_framework.response import Response
 
 #---------- for creating token when user is created
-@receiver(post_save, sender=settings.AUTH_USER_MODEL)
-def create_auth_token(sender, instance=None, created=False, **kwargs):
-    if created:
-        Token.objects.create(user=instance)
+# @receiver(post_save, sender=settings.AUTH_USER_MODEL)
+# def create_auth_token(sender, instance=None, created=False, **kwargs):
+    # if created:
+        # Token.objects.create(user=instance)
 
-    for user in User.objects.all():
-        Token.objects.get_or_create(user=user)
+    # for user in User.objects.all():
+        # Token.objects.get_or_create(user=user)
 # ===============================================
 # Miscellaneous functions
 # ===============================================
@@ -633,13 +636,38 @@ def student_photo_view(request):
     return render(request, 'read/student/student_photo.html', {'form' : form, 'photo_url' : photo_url})
 
 
-#---------------- Rest Api view -------------------------
+#---------------- Rest API views -------------------------
 
-class DocumentViewSet(viewsets.ReadOnlyModelViewSet):
-    authentication_classes = [SessionAuthentication, BasicAuthentication]
-    permission_classes = (IsAuthenticated,)
-    serializer_class = DocumentSerializer
+@api_view(['GET', 'POST'])
+def user_list(request):
+    if(request.method == 'GET'):
+        users = User.objects.all()
+        serializer = UserSerializer(users, many=True)
+        return Response(serializer.data)
+    elif(request.method == 'POST'):
+        serializer = UserSerializer(data=request.data)
+        if serializer.is_valid():
+            serializer.save()
+            return Response(serializer.data, status=status.HTTP_201_CREATED)
+        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
 
 
-    def get_queryset(self):
-        return Document.objects.filter(classroom_id__in=Classroom.objects.filter(teacher_id=self.request.user.id).values_list('id', flat=True))
+@api_view(['GET', 'PUT', 'DELETE'])
+def user_detail(request, username):
+    try:
+        user = User.objects.get(username=username)
+    except(User.DoesNotExist):
+        return Response(status=status.HTTP_404_NOT_FOUND)
+
+    if(request.method == 'GET'):
+        serializer = UserSerializer(user)
+        return Response(serializer.data)
+    elif(request.method == 'PUT'):
+        serializer = UserSerializer(user, data=request.data)
+        if(serializer.is_valid()):
+            serializer.save()
+            return Response(serializer.data)
+        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
+    elif(request.method == 'DELETE'):
+        user.delete();
+        return Response(status=status.HTTP_204_NO_CONTENT)
